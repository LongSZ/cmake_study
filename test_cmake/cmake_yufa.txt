1. cmake 最小版本
cmake_minimum_required(VERSION 3.4.1)

2. 设置项目名称
project(pro_name)

3. 设置编译类型
add_executable(pro_exe_name demo.cpp)
add_library(common STATIC util.cpp)    #生成静态库
add_library(common SHARED util.cpp)    #生成动态库或者叫共享库

4. 指定编译包含的源文件
a. 明确指定包含哪些源文件
add_library(demo demo.cpp test.cpp util.cpp) 
b. 搜索所有的cpp文件
aux_source_directory(. SRC_LIST)       # 搜索当前目录下的所有cpp文件并存在到变量SRC_LIST中
add_library(demo ${SRC_LIST})
c. 自定义搜索规则
file(GLOB SRC_LIST "*.cpp" "protocol/*.cpp")
add_library(demo ${SRC_LIST})
或者
file(GLOB SRC_LIST "*.cpp")
file(GLOB SRC_PROTOCOL_LIST "protocol/*.cpp")
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
或者
aux_source_directory(. SRC_LIST)
aux_source_directory(ptotocol SRC_PROTOCOL_LIST)
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})

5. 查找指定的库文件
find_library(log.lib    #set the name of the path variable
             log)       #specifies the name of the NDK library that u want cmake to locate

6. 设置包含目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR}
                    ${CMAKE_CURRENT_BINARY_DIR}
                    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

#linux下还可以用如下方法
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}"

7. 设置链接库搜索目录
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/libs)

#linux下还可以用如下文件
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_CURRENT_SOURCE_DIR}/libs")

8. 设置target需要链接的库
target_link_libraries(demo         #目录
                      ${log-lib})  #目标库需要链接的库, log-lib是上面find_library指定的变量名

a. 指定链接动态库或者静态库
target_link_libraries(demo libface.a)        #链接静态库libface.a
target_link_libraries(demo libface.so)       #链接动态库libface.so

b. 指定全路径
target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a)    #静态
target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.so)   #动态

c. 指定链接多个库
target_link_libraries(demo
                      ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a
                      boost_system.a
                      boost_thread
                      pthread)

9. 设置变量
a. set直接设置变量
set(SRC_LIST main.cpp test.cpp)
add_executable(demo ${SRC_LIST})

b. set追加设置变量的值
set(SRC_LIST main.cpp)
set(SRC_LIST ${SRC_LIST} test.cpp)
add_executable(demo ${SRC_LIST})



c. 指定链接多个库
target_link_libraries(demo
                      ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a
                      boost_system.a
                      boost_thread
                      pthread)

d. list追加或者删除变量的值
set(SRC_LIST main.cpp)
list(APPEND SRC_LIST test.cpp)
list(REMOVE_ITEM SRC_LIST main.cpp)
add_executable(demo ${SRC_LIST})

e. 设置Release或者Debug版本
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_BUILD_TYPE Debug)

10. 条件控制
a. if ... else if ... endif
逻辑判断加比较
if(expression)              # expression不为(0, N, NO, OFF, FALSE, NOTFOUND)时为真
if(not exp)                 # 与上面相反
if(var1 AND var2)
if(var1 OR var2)
if(COMMAND cmd)             # 如果cmd确实是命令并可调用为真
if(EXISTS dir) if(EXISTS file)   # 如果目录或者文件存在
if(file1 IS_NEWER_THAN file2)    # 当file1比file2新或者有一个不存在时为真, 文件需要使用全路径
if(IS_DIRECTORY dir)             # 当dir为目录时为真
if(DEFINED var)                  # 如果变量有被定义则为真
if(var MATCHES regex)            # 如果给定的变量能够匹配正则表达式时为真, var可以用变量名也可以用${var}
if(string MATCHES regex)

数字比较
if(variable LESS number)
if(string LESS number)
if(variable GREATER number)
if(string GREATER number)
if(variable EQUAL number)
if(string EQUAL number

字母表顺序比较
if(variable STRLESS string)
if(string STRLESS string)
if(variable STRGREATER string)
if(string STRGREATER string)
if(variable STREQUAL string)
if(string STREQUAL string)

b. while ... endwhile
while(condition)
    ...
endwhile

c. foreach ... endforeach
foreach(loop_var RANGE start stop [step])
    ...
endforeach(loop_var)
例如
foreach(i RANGE 1 9 2)
    message(${i})
endforeach(i)
#输出 1 3 5 7 9

11. 打印信息
message(${PROJECT_SOURCE_DIR})
message("build with debug module")
message(WARNING "this is a warning message")
message(FATAL_ERROR "this build has many error")    # 会导致编译失败

12. 包含其他cmake文件
include(./common.cmake)                                     # 指定包含文件的全路径
include(def)                                                # 在搜索路径中搜索def.cmake文件12. 包含其他cmake文件
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)    #设置include的搜索路径

12. 常用变量
a. 预定义变量
PROJECT_SOURCE_DIR				# 工程的根目录
PROJECT_BINARY_DIR				# 运行cmake命令的根目录
PROJECT_NAME					# 返回通过project命令设置的项目名称
CMAKE_CURRENT_SOURCE_DIR			# 当前处理的CMakeLists.txt所在的路径
CMAKE_CURRENT_BINARY_DIR			# target编译目录
CMAKE_CURRENT_LIST_DIR				# CMakeLists.txt的完整路径
CMAKE_CURRENT_LIST_LINE				# 当前所在行
CMAKE_MODULE_PATH				# 定义自己的cmake模块所在的路径,
                                                # SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake), 
                                                # 然后可以使用INCLUDE命令来调用自己的模块
EXECUTABLE_OUTPUT_PATH				# 重新定义目标二进制可执行文件的存放位置
LIBRARY_OUTPUT_PATH				# 重新定义目标链接库文件的存在位置

b. 环境变量
$ENV{Name}					# 使用环境变量
set(ENV{Name} value)				# 写入环境变量, 这里没有$符号

c. 系统信息
CMAKE_MAJOR_VERSION                             # cmake主版本号, 比如3.4.1中的3
CMAKE_MINOR_VERSION                             # cmake次版本号, 比如3.4.1中的4
CMAKE_PATCH_VERSION                             # cmake补丁等级, 比如3.4.1中的1
CMAKE_SYSTEM                                    # 系统名称, 比如linux-2.6.22
CMAKE_SYSTEM_NAME                               # 不包含版本的系统名称, 比如linux
CMAKE_SYSTEM_VERSION                            # 系统版本号, 比如 2.6.22
CMAKE_SYSTEM_PROCESSOR                          # 处理器名称, 比如i686
UNIX                                            # 在所有类UNIX平台下该值为TRUE, 包括OS X和 cygwin
WIN32                                           # 丰所有win32平台下该值为TRUE, 包括cygwin

d. 主要开关选项
BUILD_SHARED_LIBS                               # 这个开关用来控制默认的库编译方式, 如果不设置,                                                 # 则使用add_library又没有指定库类型的情况下,                                                 # 默认编译生成的库都是静态库,                                                 # 如果设置set(BUILD_SHARED_LIBS ON)后, 则默认生成的是动态库
CMAKE_C_FLAGS                                   # 设置C编译选项, 也可以通过指令 add_definitions()添加
CMAKE_CXX_FLAGS                                 # 设置c++编译选项, 也可以通过指令 add_definitions() 添加
例如:
add_definitions(-DENABLE_DEBUG -DABC)           # 参数之间用空格分割


13. INSTALL安装指令
INSTALL(TARGETS myrun mylib mystaticlib
	RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
	ARCHIVE DESTINATION libstatic
}
这里可执行二进制文件myrun安装到${CMAKE_INSTALL_PREFIX}/bin目录,
动态库mylib安装到${CMAKE_INSTALL_PREFIX}/lib目录下,
静态库mystaticlib安装到${CMAKE_INSTALL_PREFIX}/libstatic目录下,
如果bin lib libstatic使用绝对路径则CMAKE_INSTALL_PREFIX将失效, 将会使用绝对路径

普通文件安装
INSTALL(FILES files ... 
	DESTINATION <dir>
	[PERMISSIONS permissions ...]
	[CONFIGURATIONS [Debug|Release]]
	[COMPONENT <component>]
	[RENAME <name>]
	[OPTIONAL]
)

非目标文件的可执行程序安装, 例如脚本
INSTALL(PROGRAMS files ...
	DESTINATION <dir>
	[PERMISSIONS permissions ...]
	[CONFIGURATIONS [Debug|Release]]
	[COMPONENT <component>]
	[RENAME <name>]
	[OPTIONAL]
)

目录文件的安装, 例如脚本
INSTALL(PROGRAMS files ...
	DESTINATION <dir>
	[PERMISSIONS permissions ...]
	[CONFIGURATIONS [Debug|Release]]
	[COMPONENT <component>]
	[RENAME <name>]
	[OPTIONAL]
)
	
